library(reshape) (edited)
install.packages("rJava")
install.packages("rJava")
install.packages("DBI")
install.packages("RJDBC")
install.packages("XML")
install.packages("memoise")
install.packages("KoNLP")
install.packages("wordcloud")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("ggmap")
install.packages("rvest")
install.packages("RColorBrewer")
install.packages("data.table")
install.packages("dplyr")
install.packages("reshape")
library(rJava)
library(DBI)
library(RJDBC)
library(XML)
library(memoise)
library(KoNLP)
library(wordcloud)
library(dplyr)
library(ggplot2)
library(ggmap)
library(rvest)
library(RColorBrewer)
library(data.table)
library(reshape) (edited)
drv <- JDBC(
"oracle.jdbc.driver.OracleDriver",
"C:\\oraclexe\\app\\oracle\\product\\11.2.0\\server\\jdbc\\lib\\ojdbc6.jar"
)
conn <- dbConnect(drv,
"jdbc:oracle:thin:@localhost:1521:xe",
"hr",
"oracle")
tab<-dbGetQuery(conn,"SELECT*FROM TAB")
tname<-tab$TNAME
tname
cnt<-data.frame(dbGetQuery(conn,"SELECT * FROM COUNTRIES"))
cnt<-data.frame(dbGetQuery(conn,"SELECT * FROM COUNTRIES"))
dep<-data.frame(dbGetQuery(conn,"SELECT * FROM DEPARTMENTS"))
emp  <-data.frame(dbGetQuery(conn,"SELECT * FROM EMPLOYEES"))
empd<-data.frame(dbGetQuery(conn,"SELECT * FROM EMP_DETAILS_VIEW"))
job<-data.frame(dbGetQuery(conn,"SELECT * FROM JOBS"))
jobh<-data.frame(dbGetQuery(conn,"SELECT * FROM JOB_HISTORY"))
loc<-data.frame(dbGetQuery(conn,"SELECT * FROM LOCATIONS"))
reg<-data.frame(dbGetQuery(conn,"SELECT * FROM REGIONS"))
cnt <- cnt %>%
dplyr::rename(국가아이디 = COUNTRY_ID,국가명 = COUNTRY_NAME,지역아이디 = REGION_ID)
head(cnt)
dep <- dep %>%
dplyr::rename(부서아이디 = DEPARTMENT_ID,부서명 = DEPARTMENT_NAME,매니저아이디 = MANAGER_ID,
위치아이디 = LOCATION_ID)
head(dep)
emp <- emp %>%
dplyr::rename(직원아이디 = EMPLOYEE_ID,이메일 = EMAIL,전화번호 = PHONE_NUMBER,
전화번호 = PHONE_NUMBER,채용일 = HIRE_DATE,업무아이디 = JOB_ID,
연봉 = SALARY, 커미션비율 = COMMISSION_PCT, 매니저아이디 = MANAGER_ID,
부서아이디 = DEPARTMENT_ID)
head(emp)
emp <- emp %>%
dplyr::rename(직원아이디 = EMPLOYEE_ID,이메일 = EMAIL,전화번호 = PHONE_NUMBER,
전화번호 = PHONE_NUMBER,채용일 = HIRE_DATE,업무아이디 = JOB_ID,
연봉 = SALARY, 커미션비율 = COMMISSION_PCT, 매니저아이디 = MANAGER_ID,
부서아이디 = DEPARTMENT_ID) %>%
dplyr::mutate(이름 = paste("FIRST_NAME","LAST_NAME"))
emp <- emp %>%
dplyr::rename(직원아이디 = EMPLOYEE_ID,이메일 = EMAIL,전화번호 = PHONE_NUMBER,
전화번호 = PHONE_NUMBER,채용일 = HIRE_DATE,업무아이디 = JOB_ID,
연봉 = SALARY, 커미션비율 = COMMISSION_PCT, 매니저아이디 = MANAGER_ID,
부서아이디 = DEPARTMENT_ID) %>%
dplyr::mutate(이름 = paste("FIRST_NAME","LAST_NAME"))
emp <- emp %>%
dplyr::rename(직원아이디 = EMPLOYEE_ID,이메일 = EMAIL,전화번호 = PHONE_NUMBER,
전화번호 = PHONE_NUMBER,채용일 = HIRE_DATE,업무아이디 = JOB_ID,
연봉 = SALARY, 커미션비율 = COMMISSION_PCT, 매니저아이디 = MANAGER_ID,
부서아이디 = DEPARTMENT_ID) %>%
emp <- emp %>%
dplyr::mutate(이름 = paste("FIRST_NAME","LAST_NAME"))
emp <- emp %>%
dplyr::mutate(이름 = paste(FIRST_NAME,LAST_NAME))
head(emp)
emp <- emp %>%
dplyr::rename(직원아이디 = EMPLOYEE_ID,이메일 = EMAIL,전화번호 = PHONE_NUMBER,
전화번호 = PHONE_NUMBER,채용일 = HIRE_DATE,업무아이디 = JOB_ID,
연봉 = SALARY, 커미션비율 = COMMISSION_PCT, 매니저아이디 = MANAGER_ID,
부서아이디 = DEPARTMENT_ID)
dplyr::mutate(이름 = paste(FIRST_NAME,LAST_NAME))
head(emp)
job <- job %>%
dplyr::rename(업무아이디 = JOB_ID, 업무명 = JOB_TITLE,최소연봉 = MIN_SALARY,최대연봉 = MAX_SALARY)
head(job)
jobh <- jobh %>%
dplyr::rename(직원아이디 = EMPLOYEE_ID,업무시작일 = START_DATE,업무종료일 = END_DATE,
업무아이디 = JOB_ID, 부서아이디 = DEPARTMENT_ID)
head(jobh)
loc<- loc %>%
dplyr::rename(위치아이디 = LOCATION_ID,우편번호 = POSTAL_CODE,도시 = CITY,
주 = STATE_PROVINCE,국가아이디 = COUNTRY_ID)
head(loc)
loc<- loc %>%
dplyr::rename(위치아이디 = LOCATION_ID,도로주소= STREET_ADDRESS, 우편번호 = POSTAL_CODE,도시 = CITY,
주 = STATE_PROVINCE,국가아이디 = COUNTRY_ID)
head(loc)
loc<- loc %>%
dplyr::rename(위치아이디 = LOCATION_ID,도로주소= STREET_ADDRESS, 우편번호 = POSTAL_CODE,도시 = CITY,
주 = STATE_PROVINCE,국가아이디 = COUNTRY_ID)
head(loc)
emp <- emp %>%
dplyr::rename(직원아이디 = EMPLOYEE_ID,이메일 = EMAIL,전화번호 = PHONE_NUMBER,
전화번호 = PHONE_NUMBER,채용일 = HIRE_DATE,업무아이디 = JOB_ID,
연봉 = SALARY, 커미션비율 = COMMISSION_PCT, 매니저아이디 = MANAGER_ID,
부서아이디 = DEPARTMENT_ID) %>%
mutate(이름 = paste(FIRST_NAME,LAST_NAME))
head(emp)
View(emp)
if(is.data.frame(emp)){emp<-subset(emp,select= -c(FIRST_NAME,LAST_NAME))}
View(emp)
emp <- emp %>%
dplyr::mutate(월급=연봉%/%12)
head(emp)
#######################################################
## 문제 14. 연봉이 10000불 이상인
## 사원(emp)의 목록을 이름, 직원아이디, 연봉을
## 연봉 내림차순으로 보여주세요.
#######################################################
emp %>%
dplyr::filter(연봉>=10000)
emp %>%
dplyr::filter(연봉>=10000) %>%
dplyr::arrange(이름,직원아이디,연봉)
haed(emp)
head(emp)
emp %>%
dplyr::filter(연봉<=3000) %>%
dplyr::arrange(이름,직원아이디,연봉) %>%
dplyr::arrange(desc(직원아이디))
emp %>%
dplyr::filter(연봉<3000) %>%
dplyr::arrange(이름,직원아이디,연봉) %>%
dplyr::arrange(desc(직원아이디))
emp %>%
dplyr::filter(연봉<3000) %>%
dplyr::select(이름,직원아이디,연봉) %>%
dplyr::arrange(desc(직원아이디))
emp %>%
dplyr::filter(연봉<3000) %>%
dplyr::select(이름,직원아이디,연봉) %>%
dplyr::arrange(desc(직원아이디)) %>%
dplyr::mutate(보너스=월급*0.01)
emp<-emp %>%
dplyr::mutate(보너스=월급*0.01)
head(emp)
dplyr::arrange(desc(연봉))
emp %>%
dplyr::filter(연봉>=10000) %>%
dplyr::arrange(이름,직원아이디,연봉)
dplyr::arrange(desc(연봉))
head(emp)
emp %>%
dplyr::filter(연봉<3000) %>%
dplyr::mutate(보너스=sprintf("%0.0f 만원", 연봉*0.01)) %>%
dplyr::select(이름,직원아이디,연봉,보너스) %>%
dplyr::head
emp %>%
dplyr::filter(연봉<3000) %>%
dplyr::mutate(보너스=sprintf("%0.0f 만원", 연봉*0.01)) %>%
dplyr::select(이름,직원아이디,연봉,보너스) %>%
head
emp %>%
dplyr::filter(연봉>=10000) %>%
dplyr::arrange(이름,직원아이디,연봉)
emp %>%
dplyr::arrange(desc(연봉))
head(emp)
write.csv(보너스지급내역서)
write.csv(보너스지급내역서)
보너스지급내역서<-emp %>%
dplyr::filter(연봉<3000) %>%
dplyr::mutate(보너스=sprintf("%0.0f 만원", 연봉*0.01)) %>%
dplyr::select(이름,직원아이디,연봉,보너스) %>%
head
write.csv(보너스지급내역서)
write.csv(보너스지급내역서)
rm(보너스지급내역서)
head(보너스지급내역서)
보너스지급내역서<-emp %>%
dplyr::filter(연봉<3000) %>%
dplyr::mutate(보너스=sprintf("%0.0f 만원", 연봉*0.01)) %>%
dplyr::select(이름,직원아이디,연봉,보너스) %>%
head
write.csv(보너스지급내역서)
rm(보너스지급내역서)
head(보너스지급내역서)
emp %>%
dplyr::filter(연봉==24000) %>%
dplyr::select(이름)
emp %>%
dplyr::filter(연봉==apply(emp %>% select(연봉),2,max)) %>%
dplyr::select(이름)
source('~/project180728/oracledemoHR.R', encoding = 'UTF-8', echo=TRUE)
emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::filter(연봉>=10000) %>%
dplyr::select(부서명,이름,연봉) %>%
dplyr::arrange(desc(연봉))
emp %>%
dplyr::right_join(dep,by='부서아이디') %>%
dplyr::filter(연봉>=10000) %>%
dplyr::select(부서명,이름,연봉) %>%
dplyr::arrange(desc(연봉))
emp %>%
dplyr::left_join(job,by='업무아이디') %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::filter(연봉>=12000) %>%
dplyr::select(부서명,이름,연봉,업무명) %>%
dplyr::arrange(desc(연봉))
#######################################################
#### [문제 18]
#### 연봉이 12000 이 넘는 직원의 부서명,이름,연봉,업무명
#### 을 기재하시오.
######################################################
str(job)
str(emp)
str(dep)
emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::group_by(부서명,부서아이디) %>%
dplyr::summarise(연봉평균 = mean(연봉)) %>%
dplyr::arrange(desc(연봉평균))
emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::group_by(부서명,부서아이디) %>%
dplyr::summarise(연봉평균 = mean(연봉,na.rm=T)) %>%
dplyr::arrange(desc(연봉평균))
emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::group_by(부서명,부서아이디) %>%
dplyr::summarise(연봉평균 = mean(연봉,NA.rm=T)) %>%
dplyr::arrange(desc(연봉평균))
View(연봉평균)
View(연봉평균)
View(연봉평균)
str(dep)
#######################################################
#### [문제 19]
#### 부서명 별로 연봉 평균을 구하시오
#### group_by 그루핑하는 기준 (명목상기준,실질기준(FK))
#### group_by + summarise (mutate 사용불가)
#### summarise /?????????????????????????????????/
######################################################
str(emp)
emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::group_by(부서명,부서아이디) %>%
dplyr::summarise(연봉평균 = mean(연봉,na.rm=T)) %>%
dplyr::arrange(desc(연봉평균))
#######################################################
## 문제 21. 부서명, 도시, 각 부서별사원수,
## 각 부서 별 평균 연봉을 조회한다.
## 평균 연봉은 소수점 2 자리까지만 표현한다.
## emp: 연봉
## dep: 부서명
## loc: 도시
## [힌트] left_join, group_by, summarise
#######################################################
str(emp)
str(dep)
str(loc)
emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디') %>%
dplyr::group_by(부서명,부서아이디) %>%
dplyr::summarise(평균연봉=mean(연봉) %>%
emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디') %>%
dplyr::group_by(부서명,부서아이디) %>%
dplyr::summarise(평균연봉=mean(연봉)
head
emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디') %>%
dplyr::group_by(부서명,부서아이디) %>%
dplyr::summarise(평균연봉=mean(연봉)) %>%
dplyr::arrange(평균연봉)
emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디') %>%
dplyr::group_by(부서명,부서아이디) %>%
dplyr::group_by(도시,위치아이디) %>%
dplyr::summarise(평균연봉=mean(연봉)) %>%
dplyr::
dplyr::arrange(평균연봉)
emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디') %>%
dplyr::group_by(부서명,부서아이디) %>%
dplyr::group_by(도시,위치아이디) %>%
dplyr::summarise(평균연봉=mean(연봉)) %>%
dplyr::arrange(평균연봉)
emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디') %>%
head
emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디') %>%
dplyr::group_by(부서명,부서아이디,도시) %>%
dplyr::summarise(사원수=length(직원아이디),평균연봉=mean(연봉)) %>%
emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디') %>%
dplyr::group_by(부서명,부서아이디,도시) %>%
dplyr::summarise(사원수=length(직원아이디),평균연봉=mean(연봉)) %>%
dplyr::arrange
emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디') %>%
dplyr::group_by(부서명,부서아이디,도시) %>%
dplyr::summarise(사원수=length(직원아이디),평균연봉=mean(연봉)) %>%
temp<-emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디') %>%
dplyr::group_by(부서명,부서아이디,도시) %>%
dplyr::summarise(사원수=length(직원아이디),평균연봉=mean(연봉)) %>%
temp<-emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디') %>%
dplyr::group_by(부서명,부서아이디,도시) %>%
dplyr::summarise(사원수=length(직원아이디),평균연봉=mean(연봉)) %>%
View(temp)
temp<-emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디') %>%
dplyr::group_by(부서명,부서아이디,도시) %>%
dplyr::summarise(사원수=length(직원아이디),평균연봉=mean(연봉)) %>%
temp<-emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디') %>%
dplyr::group_by(부서명,부서아이디,도시) %>%
dplyr::summarise(사원수=length(직원아이디),평균연봉=mean(연봉)) %>%
View(temp)
View(temp)
temp<-emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디') %>%
dplyr::group_by(부서명,부서아이디,도시) %>%
dplyr::summarise(사원수=length(직원아이디),평균연봉=mean(연봉))
View(temp)
View(temp)
temp<-emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(loc,by='위치아이디') %>%
dplyr::group_by(부서명,부서아이디,도시) %>%
dplyr::summarise(사원수=length(직원아이디),평균연봉=sprintf("%0.2f 만원",mean(연봉)))
View(temp)
dep %>%
dplyr::left_join(emp,by='부서아이디') %>%
dplyr::group_by(부서명,부서아이디) %>%
dplyr::summarise(최대연봉=max(연봉))
temp<-dep %>%
dplyr::left_join(emp,by='부서아이디') %>%
dplyr::group_by(부서명,부서아이디) %>%
dplyr::summarise(최대연봉=max(연봉))
View(temp)
install.packages("stringr")
install.packages("stringr")
library(stringr)
test <- c('apple','banana','cherry','Apple','Pineapple',NA)
ifelse(stringr::str_detect(test,'A'),'Good','Bad')
emp %>%
select(부서아이디)
emp %>%
dplyr::select(부서아이디)
is.na(emp %>% select(부서아이디))
emp %>%
dplyr::filter(is.na(emp %>% select(부서아이디))) %>%
dplyr::select(이름,연봉,부서아이디)
emp %>%
dplyr::filter(is.na(emp %>% select(부서아이디)) %>%
dplyr::select(이름,연봉,부서아이디)
emp %>%
dplyr::filter(is.na(emp %>% select(부서아이디))) %>%
dplyr::select(이름,연봉,부서아이디)
#######################################################
#### 문제 23. 부서아이디를 발급받지 않으면
#### 신입입니다.
#### 신입의 이름과 연봉, 부서아이디 없음을 출력하시오.
##  test <- c('apple','banana','cherry','Apple','Pineapple',NA)
## ifelse(stringr::str_detect(test,'A'),'Good','Bad')
######################################################
str(emp)
emp %>%
#dplyr::filter(is.na(emp %>% select(부서아이디))) %>%
dplyr::select(이름,연봉,부서아이디)
emp %>%
dplyr::filter(is.na(emp %>% select(부서아이디))) %>%
dplyr::select(이름,연봉,부서아이디)
emp %>%
dplyr::filter(is.na(emp $ 부서아이디)) %>%
dplyr::select(이름,연봉,부서아이디)
emp %>%
dplyr::filter(str_detect(emp$이름))
emp %>%
dplyr::filter(str_detect(emp$이름,'S'),
str_detect(emp$이름,'T')) %>%
dplyr::select(이름)
emp %>%
dplyr::filter(str_detect(emp$이름,'S'),
str_detect(emp$이름,'T')) %>%
dplyr::select(이름)
write.csv(보너스지급내역서,'보너스지급내역서.csv')
write.csv(보너스지급내역서,'보너스지급내역서.csv')
install.packages("rJava")
install.packages("DBI")
install.packages("RJDBC")
install.packages("XML")
install.packages("memoise")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("DBI")
install.packages("RJDBC")
install.packages("XML")
install.packages("memoise")
install.packages("KoNLP")
install.packages("wordcloud")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("ggmap")
install.packages("rvest")
install.packages("RColorBrewer")
install.packages("data.table")
install.packages("dplyr")
install.packages("reshape")
install.packages("stringr")
txt <- readLines("dog.txt")
getwd()
setwd("C:/Users/Administrator/Desktop")
txt <- readLines("dog.txt")
setwd("C:/Users/Administrator/Desktop")
txt <- readLines("dog.txt")
library(rJava)
library(DBI)
library(RJDBC)
library(XML)
library(memoise)
library(KoNLP)
library(wordcloud)
library(dplyr)
library(ggplot2)
library(ggmap)
library(rvest)
library(RColorBrewer)
library(data.table)
library(reshape)
library(stringr)
txt <- readLines("dog.txt")
txt<-readLines("dog.txt")
txt<-readLines('dog.txt')
txt<-readLines('dog.txt')
txt<-readLines('dog.txt')
setwd("C:/Users/Administrator/Desktop")
txt<-readLines('dog.txt')
getwd()
setwd("C:/Users/Administrator/Desktop")
txt<-readLines("dog.txt")
txt<-readLines("dog.txt")
setwd("C:/Users/Administrator/Desktop")
source('~/project180728/textmining.R', echo=TRUE)
install.packages("rJava")
install.packages("DBI")
install.packages("RJDBC")
install.packages("memoise")
install.packages("KoNLP")
install.packages("dplyr")
install.packages("RColorBrewer")
install.packages("reshape")
install.packages("ggplot2")
install.packages("rvest")
install.packages("data.table")
install.packages("wordcloud")
install.packages("stringr")
install.packages("ggmap")
install.packages("dplyr")
txt<-readLines("dog.txt")
txt
View(txt)
install.packages("DBI")
install.packages("RJDBC")
install.packages("memoise")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("stringr")
install.packages("wordcloud")
install.packages("ggmap")
install.packages("KoNLP")
install.packages("data.table")
install.packages("RColorBrewer")
install.packages("reshape")
install.packages("rvest")
place <- sapply(txt,KoNLP::extractNoun(),USE.NAMES = F)
place <- sapply(txt,extractNoun,USE.NAMES = F)
place
temp<- unlist(place)
place <- filter(function(x)(nchar(x)>=3),txt)
place <- Filter(function(x)(nchar(x)>=3),txt)
